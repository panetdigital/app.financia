@page "/graficos"
@inject TransactionService TransactionService
@inject NavigationManager NavigationManager
@using AppFinancia.Services;
@using AppFinancia.Models;
@inject IJSRuntime JS


<h3>Gráficos Financeiros</h3>
 
<div class="mb-4">
    <canvas id="barChart"></canvas>
</div>
<div class="mb-4">
   
    <canvas id="pieChart"></canvas>
</div>
<div class="mb-4">
    <canvas id="histogramChart"></canvas>
</div>
<h6>Referencia:</h6>
<p class="small">
    (0)Alimentação,
    (1)Salario,
    (2)Vale,
    (3)Presente,
    (4)Transporte,
    (5)Moradia,
    (6)Educação,
    (7)Lazer,
    (8)Remedio,
    (9)Gas,
    (10)Internet,
    (11)Agua,
    (12)Luz,
    (13)ProdLimpenza,
    (14)Cabelo,
    (15)Emprestimo,
    (16)Roupas,
    (17)Outros</p>
@code {
    private List<Transaction> _transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        _transactions = await TransactionService.GetTransactionsAsync();
        await LoadCharts();
    }

    private async Task LoadCharts()
    {
        var expenses = _transactions.Where(t => t.IsExpense).Sum(t => t.Amount);
        var incomes = _transactions.Where(t => !t.IsExpense).Sum(t => t.Amount);

        // Gráfico de Barra: Comparação de Despesas e Receitas
        var barChartData = new
        {
            labels = new[] { "Despesas", "Receitas" },
            datasets = new[]
            {
                new {
                    label = "Comparação",
                    backgroundColor = new[] { "rgba(255,99,132,0.2)", "rgba(54,162,235,0.2)" },
                    borderColor = new[] { "rgba(255,99,132,1)", "rgba(54,162,235,1)" },
                    borderWidth = 1,
                    data = new[] { expenses, incomes }
                }
            }
        };

        // Gráfico de Pizza: Distribuição por Categoria (somente Despesas)
        var categories = _transactions.Where(t => t.IsExpense).Select(t => t.Category).Distinct().ToList();
        var categoryAmounts = categories.Select(cat => _transactions.Where(t => t.Category == cat && t.IsExpense).Sum(t => t.Amount)).ToArray();

        var pieChartData = new
        {
            labels = categories,
            datasets = new[]
            {
                new {
                    data = categoryAmounts,
                    backgroundColor = new[] { "rgba(255,99,132,0.2)", "rgba(54,162,235,0.2)", "rgba(75,192,192,0.2)", "rgba(153,102,255,0.2)", "rgba(255,159,64,0.2)" },
                    borderColor = new[] { "rgba(255,99,132,1)", "rgba(54,162,235,1)", "rgba(75,192,192,1)", "rgba(153,102,255,1)", "rgba(255,159,64,1)" },
                    borderWidth = 1
                }
            }
        };

        // Gráfico de Histograma: Distribuição por Data
        var dates = _transactions.Select(t => t.Date.ToShortDateString()).Distinct().OrderBy(d => d).ToList();
        var dateAmounts = dates.Select(date => _transactions.Where(t => t.Date.ToShortDateString() == date).Sum(t => t.Amount)).ToArray();

        var histogramData = new
        {
            labels = dates,
            datasets = new[]
            {
                new {
                    label = "Distribuição por Data",
                    backgroundColor = "rgba(75,192,192,0.2)",
                    borderColor = "rgba(75,192,192,1)",
                    borderWidth = 1,
                    data = dateAmounts
                }
            }
        };

        await JS.InvokeVoidAsync("drawChart", "barChart", barChartData, "bar");
        await JS.InvokeVoidAsync("drawChart", "pieChart", pieChartData, "pie");
        await JS.InvokeVoidAsync("drawChart", "histogramChart", histogramData, "bar");
    }
}